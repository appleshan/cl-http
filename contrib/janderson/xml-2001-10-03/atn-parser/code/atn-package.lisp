;;; -*- Mode: LISP; Syntax: Ansi-Common-Lisp; Base: 10; Package: cl-user; -*-

#|
<DOCUMENTATION>
 <COPYRIGHT YEAR='2001' AUTHOR='james adam anderson' MARK='(C)'
            href='file://bnfp/sysdcl.lisp' />
 <CHRONOLOGY>
  <DELTA DATE='20010620'>regex interface</DELTA>
  <DELTA DATE='20010718' AUTHOR='JCMA'>defpackage cleaned up</DELTA>
  <DELTA DATE='20010722'>constructor specializers</DELTA>
  <CHRONOLOGY>
 </DOCUMENTATION>
|#

(in-package "CL-USER")

;;
;; define the package and intern and export those symbols to be available for
;; a running application

(defPackage "BNF-PARSER"
  (:nicknames "BNFP")
  (:shadow "PARSE-ERROR" "SYMBOL")
  #+Allegro (:import-from "EXCL" "WITHOUT-INTERRUPTS")
  #+(and Allegro (version>= 6 0)) (:import-from "MOP" "CLASS-PRECEDENCE-LIST")
  #+(and Allegro (version< 6 0)) (:import-from "CLOS" "CLASS-PRECEDENCE-LIST")
  #+Genera (:import-from "CLOS-INTERNALS" "CLASS-PRECEDENCE-LIST" "FUNCALLABLE-STANDARD-CLASS" "VALIDATE-SUPERCLASS")
  #+Genera(:import-from "SCL" "WITHOUT-INTERRUPTS")
  #+Genera(:shadowing-import-from "SI" "STREAM")
  (:export
    "*ATN-CLASS"
    "*ATN-LEVEL"
    "*ATN-NET"
    "*ATN-NODE"
    "*ATN-PROPERTIES"
    "*ATN-REGISTER-WORDS"
    "*ATN-SAVE-DEFINITIONS*"
    "*ATN-STACK"
    "*ATN-STRUCTURE*"
    "*ATN-TERM*"
    "*ATN-TERM?*"
    "*ATN-TOKEN-PACKAGE*"
    "*ATN-TRACE*"
    "*ATN-TRACE-NETS*"
    "*ATN-WFST"
    "*CLASS.ATN*"
    "*CLASS.ATN-ALTERNATIVE-CATEGORY*"
    "*CLASS.ATN-BUILTIN-PREDICATE-CATEGORY*"
    "*CLASS.ATN-CELL-CATEGORY*"
    "*CLASS.ATN-COMPLEMENT-CATEGORY*"
    "*CLASS.ATN-CONJUNCTION*"
    "*CLASS.ATN-DERIVED-CATEGORY*"
    "*CLASS.ATN-LEXEM*"
    "*CLASS.ATN-LEXICON*"
    "*CLASS.ATN-NEGATED-ALTERNATIVES*"
    "*CLASS.ATN-NODE*"
    "*CLASS.ATN-PRIMITIVE-CATEGORY*"
    "*CLASS.ATN-UNDECLARED-CATEGORY*"
    "*CLASS.CAT-ATN-EDGE*"
    "*CLASS.CELL-ATN-EDGE*"
    "*CLASS.JUMP-ATN-EDGE*"
    "*CLASS.OR-ATN-EDGE*"
    "*CLASS.POP-ATN-EDGE*"
    "*CLASS.PUSH-ATN-EDGE*"
    "*CLASS.TEST-ATN-EDGE*"
    "*CLASS.WORD-ATN-EDGE*"
    "*SOURCE-RECORDING*"
    "*TERMINAL-PARSE-ERROR-ACTION*"
    "ATN"
    "ATN-ALTERNATIVE-CATEGORY"
    "ATN-BINDINGS"
    "ATN-BUILTIN-PREDICATE-CATEGORY"
    "ATN-CELL-CATEGORY"
    "ATN-COMPLEMENT-CATEGORY"
    "ATN-CONJUNCTION"
    "ATN-CONSTRUCTOR-SPECIALIZER"
    "ATN-CONTINUE-ACTIONS"
    "ATN-DERIVED-CATEGORY"
    "ATN-FAIL-ACTIONS"
    "ATN-FINALLY"
    "ATN-INITIAL-ACTIONS"
    "ATN-INPUT"
    "ATN-LEXEM"
    "ATN-LEXICON"
    "ATN-NAME"
    "ATN-NEGATED-ALTERNATIVES"
    "ATN-NODE"
    "ATN-PRIMITIVE-CATEGORY"
    "ATN-PROCEDURE-CALL"
    "ATN-RECURSION"
    "ATN-REDUCE-ITEM"
    "ATN-REDUCE-STRUCTURE"
    "ATN-SEQUENCE-INPUT"
    "ATN-STACK"
    "ATN-SUCCEED-ACTIONS"
    "ATN-TERM-CARDINALITY"
    "ATN-TERM-NAMES"
    "ATN-UNDECLARED-CATEGORY"
    "BNF-TO-REGEX-ATN"
    "CALL-WITH-PARSED-ALIST"
    "CALL-WITH-PARSED-TERMS"
    "CAT-ATN-EDGE"
    "CELL-ATN-EDGE"
    "COMPILE-ATN-SYSTEM"
    "CONDITION-CONTINUE-FORMAT-ARGUMENTS"
    "CONDITION-CONTINUE-FORMAT-STRING"
    "CONDITION-FORMAT-ARGUMENTS"
    "CONDITION-FORMAT-STRING"
    "CONDITION-PARSE-STACK"
    "CONDITION-PARSE-TERM"
    "CONSTRUCTOR-SPECIALIZERS"
    "CONTINUABLE-PARSE-ERROR"
    "CONTINUE-FORMAT-ARGUMENTS"
    "CONTINUE-FORMAT-STRING"
    "FIND-PARSED-TERM"
    "FORMAT-ARGUMENTS"
    "FORMAT-STRING"
    "INFERENCE-SYSTEM"
    "INFERENCE-UNIT"
    "INPUT.IS-AT-END"
    "INPUT.ITEM"
    "INPUT.LAST-ITEM"
    "INPUT.LENGTH"
    "INPUT.PEEK-ITEM"
    "INPUT.REPLACE-ITEM"
    "IS-ATN-TRACE"
    "IS-REDUCTION-ENABLED"
    "JUMP-ATN-EDGE"
    "MAKE-LISP-FORM"
    "MAKE-LISP-SUBFORM"
    "MAKE-LISP-TEST-FORM"
    "MATCH-REGEX"
    "NTH-PARSE-RESULT"
    "OR-ATN-EDGE"
    "PARSE-EOF-ERROR"
    "PARSE-RESULT"
    "PARSE-STATE"
    "POP-ATN-EDGE"
    "PPRINT-ATN"
    "PUSH-ATN-EDGE"
    "REGULAR-EXPRESSION-TO-REGEX-ATN"
    "RULE"
    "RULE-DOCUMENTATION"
    "RULE-NAME"
    "RULE-SOURCES"
    "SORT-PARSE-RESULTS"
    "SYSTEM"
    "SYSTEM-DOCUMENTATION"
    "SYSTEM-NAME"
    "SYSTEM-PLIST"
    "TERMINAL-PARSE-ERROR"
    "TEST-ATN-EDGE"
    "WITH-PARSED-ALIST"
    "WITH-PARSED-PLIST"
    "WITH-PARSED-TERM"
    "WORD-ATN-EDGE"))

:EOF
